import org.yaml.snakeyaml.DumperOptions
import org.yaml.snakeyaml.Yaml

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.27'
    }
}


plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group


repositories {
    maven { url 'https://maven.wispforest.io' }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    //OWO (Config etc.)
    annotationProcessor modImplementation("io.wispforest:owo-lib:${project.owo_version}")
    include "io.wispforest:owo-sentinel:${project.owo_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", minecraft_version
    inputs.property "loader_version", loader_version
    inputs.property "owo_version", owo_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": minecraft_version,
                "loader_version": loader_version,
                "owo_version": owo_version
    }

//    filesMatching("**/publish.yml") {
//        expand "VERSION": project.version + "+" + minecraft_version,
//                "RELEASE_NAME": "Concacity v" + project.version
//    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${archives_base_name}" }
    }
}


tasks.register('updatePublishFile') {
    def configurationYAML = ".github/workflows/publish.yml"

    inputs.files configurationYAML
    outputs.files configurationYAML

    DumperOptions options = new DumperOptions()
    options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK)
    options.setIndent(2)
    options.setAllowReadOnlyProperties(true)
    options.setPrettyFlow(true)

    Yaml yaml = new Yaml(options)

    def updateGlobalProperties = { cfg, name, version -> cfg.env.put(name, version)
    }

    doLast {
        def cfg = yaml.load(new File(configurationYAML).newInputStream())
        updateGlobalProperties(cfg, 'VERSION', mod_version + '+' + minecraft_version)
        updateGlobalProperties(cfg, 'MINECRAFT_VERSION', minecraft_version)
        updateGlobalProperties(cfg, 'RELEASE_NAME', 'Concacity v' + mod_version + ' for ' + minecraft_version)

        FileWriter writer = new FileWriter(configurationYAML)
        yaml.dump(cfg, writer)

    }
}

loom {
    runs {
        datagen {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${archives_base_name}"

            runDir "build/datagen"
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs += ['src/main/generated']
        }
    }
}


// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
